## design of a lightweight learning management system

Most content will be statically-generated thru emacs, org-mode, make,
etc.  And I'll use subversion for code exchange.  But there are a few
things I want a server to do...

* Grades: entry through HTML forms too annoying, what to do?

course » grade category (drop, aggregate) » graded item (points) »
score. Can show letter grades using scale.

On “feedback” section of course page, can paste in text to record
grades, or POST it from region in emacs. /l3ms/course/cs150s11/grades

Must be able to edit grades already recorded too. In a chunk for each
graded item and score, keep md5 sum of the recorded text. If it
changes, reinterpret it.

Could be a python expression? But that's very dangerous. Ok if it's of
the form f(scores[m:n]) where m,n ints and scores in ascending order
and f is some known safe function (like sum).

  * Assignments = sum([2:])
  *** Assignment 1 = 40
  ***** cvirella=36
  some feedback here
  Some way to elide parts of this from storage (exclude blocks)
  ***** osei=38
  Convert org to json+HTML using emacs lisp, then post that to server
  side interpreter.


* HTTP logout
  For some reason I haven't given up on this yet.
  I think what you have to do is:

   --- request /logout --->
   <-- 401 auth required, same realm as always ---
   --- invalid@invalid --->
   <-- 200 OK

   The question is whether the 401 will automatically pop up an auth
   dialog.

   Or maybe the 401 isn't necessary.. it's just that it controls the
   realm.  But to bypass Apache's lookup, this has to be simulated,
   rather than configured in Apache?

* HTTP/Django authentication:
  - can use ajax to send HTTP Authorization (and have browser store
    it) when user provides session-based password to login form.

  |   | REMOTE_USER | request.user | Basic auth | login_required    |
  | 1 | blank       | blank        | 401 page = | login page        |
  | 2 | blank       | set          | login page | works             |
  | 3 | set         | blank        | works      | login page        |
  | 4 | set         | set (agree)  | works      | works             |
  | 5 | set         | set (diff)   | works      | go w/request.user |
  |   |             |              |            |                   |


* NIXED HTTP/Django authentication sync: take the lead from trac
  /l3ms/login/ -- protected by HTTP auth; logs in session using REMOTE_USER
                  then redirects to /u/USERNAME/ or GET[next]
  /l3ms/       -- contains links to register, retreive/reset, login, logout
  /l3ms/?next=/path/ -- give "login required" message, then link to /login/
  /l3ms/u/USERNAME/  -- profile page, protected w/login_required
  /l3ms/register/ -- not protected
  /l3ms/forgot/ -- not protected
  /l3ms/register/ -- not protected



* Account management
  For setting up authentication and authorization for HTTP generally
  as well as Subversion.  Allow users to set/modify/reset their own
  passwords using validated email addresses.

*** DONE need to try out postgres HTTP auth first

*** MAYBE can apache provide custom 401 page? with reset link?
*** DONE possible for django app to get username from HTTP auth?
***** Initial server response
HTTP/1.1 401 Authorization Required
Server: HTTPd/1.0
Date: Sat, 27 Nov 2004 10:18:15 GMT
WWW-Authenticate: Basic realm="Secure Area"
Content-Type: text/html
Content-Length: 311

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML>
  <HEAD>
    <TITLE>Error</TITLE>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
  </HEAD>
  <BODY><H1>401 Unauthorized.</H1></BODY>
</HTML>

***** Client re-request, user "Aladdin" password "open sesame"
GET /private/index.html HTTP/1.1
Host: localhost
Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

where base64("Aladdin:open sesame") == "QWxhZGRpbjpvcGVuIHNlc2FtZQ=="

So it should be possible to grab that header?

***** Digest auth possible, but not needed with SSL

***** Might want to re-auth with cookies before gradebook access


*** User registration process

 - admin can paste a bunch of email addresses to send invitations
 - anyone on internet can register, subject to approval
 - enrollment keys?

         admin enters email, send validation key
  START -------------------------> NEW_INVITE
    |                              / |
    | enter name, login, pass,    /  | click-back validation key
    | send validation key        /   |
    v                           /    v
   NEW --------> EXPIRED <------   VALID_INVITE
    |                                |
    | click-back validation key      | enter name, login, pass
    |                                |
    v                                |
   VALID <---------------------------+

 Other operations:
   - retrieve login (sent to email)
   - reset password (click-back from email)
   - update email, if logged in (validate key sent to new, notify sent to old)
   - edit name

Subversion layout can be consistent for all courses:

                    USERNAME group valid-user world
 public/                       r       --      --
 shared/                       rw      --      --
 private/USERNAME/     rw      --      --      --


approved
validated (refers to email)
completed

only when all 3 are true do they become active.

enrolled

* Grade keeping
  So that students can check their grades.  Ideally MY interface to it
  will not be web-based, but rather just an ODS file.  The program can
  read the ODS (or perhaps exported CSV) and present that info to
  authenticated students.

* Submission (for courses not primarily using subversion)
  Authenticated students can upload files to store into
  subversion. Ideally will handle single or multiple files, can
  enforce filenames, etc.



* URL and page design
*** /djlms/  when authenticated  "my_profile"
    User profile, which includes:
    - name, username, gravatar, email address
    - about me
    - phone number (prof only, classmates, any students)
    - email address (prof only, classmates, any students)
    - IM screen name (multiple: prof only, classmates, any students)
    - enrolled course list, by semester
    With links to:
    - change email address
    - edit name (jquery)
    - edit "about me" (jquery)
    - change gravatar (on gravatar.com)
    - change password (jquery)
    - all courses (expand)
*** /djlms/ when *not* authenticated  "unauthenticated" (also the 401 page)
    - Login/password box -- can default to REMOTE_USER if set
    - Link to retrieve login
    - Link to reset password
    - Link/form to register new user
*** /djlms/user/LOGIN/  @login_required  "user_profile"
    - if LOGIN == request.user then same as "my_profile", otherwise:
    - name, username, gravatar, about me
    - phone, email (after checking permissions)
    - enrolled course list, by semester
    - no edit links, unless request.user.is_staff
    - no all courses
*** /djlms/nav/   "navbar"
    - top of every page, including static via JS.
    - user ID here can be based on REMOTE_USER instead of Django login
    - but REMOTE_USER takes priority if set
    - "Chris League _account_ cs150f10 _home_ _scores_ _students_ _trac_? _log out_"
    - could record stats using this link too.
    - or "Anonymous _log in_ _register_"
*** /djlms/course/CSXXXYZZ/  @login_required, IF NOT enrolled
    - box to enter enrollment key, or
    - choice to enter as guest, subject to approval, or
    - notice that you are pending approval
*** /djlms/course/CSXXXYZZ/ @login_required, IF enrolled
    - roster and scores, both
    - roster has links to user_profiles
    - scores includes graphs etc.
*** /djlms/students/CSXXXYZZ/  @login_required, IF enrolled:
    - links to enrolled student profiles
*** /djlms/students/CSXXXYZZ/  @login_required but NOT enrolled
    - show enrollment page
*** /djlms/scores/CSXXXYZZ/   @login_required IF enrolled:
    - grades and feedback
*** /djlms/enroll/CSXXXYZZ/  @login_required, if NOT enrolled:
    - box to enter enrollment key, or
    - choice to enter as guest, subject to approval
*** /djlms/enroll/CSXXXyyZZ/ @login_required, if enrolled already
    - 

* django apps: accounts, courses (& enrollment), scores
